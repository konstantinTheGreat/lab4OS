#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>

int countWords(const char *str) {
    int wordCount = 0;
    bool inWord = false;

    while (*str) {
        if (*str == ' ' || *str == '\t' || *str == '\n' || *str == '\r') {
            if (inWord) {
                inWord = false;
                wordCount++;
            }
        } else {
            inWord = true;
        }

        str++;
    }

    if (inWord) {
        wordCount++;
    }

    return wordCount;
}

int main() {
    char buffer[1000];
    char uptimeOutput[1000];
    char separator[] = "* * * * * * * * * * * * * * * * * * * *\n";
    FILE *uptimeStream;

    // Process each line from stdin
    while (fgets(buffer, sizeof(buffer), stdin) != NULL) {
        printf("%s", buffer);

        // Process each line here
        size_t length = strlen(buffer);
        if (length > 0 && buffer[length - 1] == '\n') {
            buffer[length - 1] = '\0';
        }

        // Run the "uptime" command and open a pipe to read its output
        uptimeStream = popen("uptime", "r");
        if (fgets(uptimeOutput, sizeof(uptimeOutput), uptimeStream) == NULL) {
            perror("Error");
            pclose(uptimeStream);
            return 0;
        }

        pclose(uptimeStream);

        // Concatenate buffer with separator and uptimeOutput
        strcat(buffer, separator);
        strcat(buffer, uptimeOutput);

        // Print the final string
        printf("%s", buffer);

        // Create a pipe and fork a child process
        int fd[2], result;
        size_t size;
        char resstring[200];

        if (pipe(fd) < 0) {
            printf("Can't create pipe\n");
            exit(-1);
        }

        result = fork();

        if (!result) {
            printf("Can't fork child\n");
            exit(-1);
        } else if (result > 0) {
            close(fd[0]);
            size = write(fd[1], buffer, 200);
            close(fd[1]);
        } else {
            FILE *file = fopen("file_res1.txt", "w");

            if (file == NULL) {
                perror("File error");
                return 1;
            }

            close(fd[1]);
            size = read(fd[0], resstring, 200);
            int words = countWords(resstring);

            // Write the word count to the file
            fprintf(file, "%d", words);

            fclose(file);
            close(fd[0]);
        }
    }

    return 0;
}

